//created at top of game.js
var buttonColors = ["red","blue","green","yellow"];

// Keeps track of colors randomly generated by Game
var gamePattern = [];

// Keeps track of colors chosen by User
var userClickedPattern = [];

// initializing start to false
var start = false;

// Starting at level 0
var level = 0;

// Press any key to start the game 
$(document).keypress(function(){
    if(!start) {
        $("h1").text("Level "+level);
        nextSequence();

        // Setting 'start' to true to indicate the game has started after pressing a key
        start = true;
    }
});


// jQuery code to detect when any of the buttons are clicked and trigger a handler function.
$(".btn").click (function(){
    // Getting the id the button clicked by User
    let userChosenColor = $(this).attr("id");
    
    // Whatever the button clicked by User, its pushed into userClickedPattern array
    userClickedPattern.push(userChosenColor);
    
    // Playing sound for the button clicked by User
    playsound(userChosenColor);
    
    // Animating effect for the button clicked by User
    animatePress(userChosenColor);

    // Calling checkAnswer function, passing in the index of the last answer in the user's sequence.
    checkAnswer(userClickedPattern.length-1);
    });

//nextSequence function
function nextSequence() {
    // Once nextSequence() is triggered, reset the userClickedPattern to an empty array ready for the next level.
    userClickedPattern = [];

    // increasing level by 1
    level++;

    // Updating h1 with the increase in level
    $("h1").text("Level "+level);

    // Genarating random number from 0 to 3
    let randomNumber = Math.floor(Math.random() * 4);
    
    // Selecting a random color from buttonColors array using randomNumber as index
    let randomChosenColor = buttonColors[randomNumber];
    
    // Whatever the random color we get from buttonColors array, that color is pushed into gamePattern array
    gamePattern.push(randomChosenColor);
    
    // jQuery code to give a flashing animation to the random color button
    $("#"+randomChosenColor).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
    
    // Calling playsound() function to play sound for randomChosenButton
    playsound(randomChosenColor);
}


// js function to play sound based on the random color button
function playsound(name) {
    var audio = new Audio("sounds/" + name + ".mp3");
    audio.play();   
}

function animatePress(currentColor) {
    // Adding the ".pressed" class defined in css file to the button with a given id
    $("."+currentColor).addClass("pressed");
    
    // Removing the ".pressed" class after a period of 100 milliseconds
    setTimeout(function(){
        $("#"+currentColor).removeClass("pressed");
    },100);
}

// function to check the pattern
function checkAnswer(currentLevel) {
    if (userClickedPattern[currentLevel] === gamePattern[currentLevel]){
        console.log("success");
        
        if (userClickedPattern.length === gamePattern.length) {
            setTimeout(function(){
                nextSequence();
            }, 1000);
        }
    }
    else {
        // Logging wrong for debugging purposes
        console.log("wrong!");
        
        // Playing wrong.mp3 from 'sounds' folder
        var wrong = new Audio('sounds/wrong.mp3');
        wrong.play();
        
        // Adding "game-over" class defined in 'styles.css' to give a "GAME OVER!" effect
        $("body").addClass("game-over");
        
        // Removing "game-over" class after a period of 200 milliseconds
        setTimeout(function(){
            $("body").removeClass("game-over");
        },200);
        
        // Prompting User to press any key if He/She wishes to play another round
        $("h1").text("Game Over, Press Any Key to Restart");

        // calling startOver function when user presses a key after losing to play one more time
        startOver();
    }
}

function startOver() {
    // Resetting all values
    level = 0;
    start = false;
    gamePattern = [];
}







